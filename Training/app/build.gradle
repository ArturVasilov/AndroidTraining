apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "ru.arturvasilov.training"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode calcVersionCode()
        versionName calcVersionName()
    }
    buildTypes {
        debug {
            buildConfigField 'boolean', 'IS_DEBUG', 'true'
        }

        release {
            buildConfigField 'boolean', 'IS_DEBUG', 'false'

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        webView {
            versionName "${calcVersionName()} [WebView]"
        }

        imageLoading {
            versionName "${calcVersionName()} [ImageLoading]"
        }

        services {
            versionName "${calcVersionName()} [Services]"
        }

        contentProvider {
            versionName "${calcVersionName()} [ContentProvider]"
        }

        touch {
            versionName "${calcVersionName()} [Touch]"
        }

        designPatterns {
            versionName "${calcVersionName()} [DesignPatterns]"
        }

        rx {
            versionName "${calcVersionName()} [Reactive]"
        }

        sensors {
            versionName "${calcVersionName()} [Sensors]"
        }

    }
}

apply from: '../versions.gradle'

dependencies {
    compile "com.android.support:appcompat-v7:${supportVersion}"

    rxCompile "io.reactivex:rxjava:${rxJavaVersion}"
}

task displayProgress {

    def trainingItems = items()

    doLast {
        trainingItems.each {
            println "training item ${it.name()}, progress - ${it.progress() * 100}%"
        }
    }
}

int calcVersionCode() {
    return progress() / 5 + 1
}

String calcVersionName() {
    int progress = progress()
    int major = progress / 10
    int minor = progress % 10
    return "${major}.${minor}"
}

int progress() {
    int progress = 0
    items().each {
        progress += (int) (it.progress() * it.majority())
    }
    return progress;
}

List<TrainingItem> items() {
    TrainingItem webView = new TrainingItemImpl(1f, 5, "webView");
    TrainingItem imageLoading = new TrainingItemImpl(1f, 15, "imageLoading");
    TrainingItem services = new TrainingItemImpl(1f, 10, "services");
    TrainingItem contentProvider = new TrainingItemImpl(1f, 10, "contentProvider");
    TrainingItem touch = new TrainingItemImpl(1f, 5, "touches");
    TrainingItem designPatterns = new TrainingItemImpl(1f, 25, "designPatterns");
    TrainingItem rx = new TrainingItemImpl(1f, 25, "rx");
    TrainingItem sensors = new TrainingItemImpl(1f, 5, "sensors");

    List<TrainingItem> items = [webView, imageLoading, services, contentProvider, touch, designPatterns, rx, sensors]
    int majoritySum = items*.majority().sum() as int;
    assert majoritySum == 100
    return items
}

trait TrainingItem {

    abstract float progress()

    abstract int majority()

    abstract def name()

}

class TrainingItemImpl implements TrainingItem {

    def name
    float progress
    int majority

    TrainingItemImpl(progress, majority, name) {
        this.progress = progress
        this.majority = majority
        this.name = name
    }

    @Override
    def name() {
        return name
    }

    @Override
    float progress() {
        return progress
    }

    @Override
    int majority() {
        return majority
    }
}



